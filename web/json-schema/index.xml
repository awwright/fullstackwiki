<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:w="tag:fullstack.wiki,2018:ns/" lang="en" dir="ltr">
	<head>
		<meta charset="UTF-8" />
		<title>JSON Schema</title>
		<link rel="stylesheet" href="jsonschema.css" />
		<link rel="stylesheet" href="/style/highlight.js/solarized-light.css" />
	</head>
	<body>
		<main>

<h1>JSON Schema</h1>
<p>JSON Schema is a vocabulary for making assertions about JSON documents. You can use a JSON Schema document to annotate and validate other JSON documents.</p>

<h2>Uses for JSON Schema</h2>

<dl>
	<dt>Writing tests for JSON documents.</dt><dd>Use JSON Schema in your application tests to ensure that data follows basic constraints, in declarative code instead of procedural code.</dd>
	<dt>Validation of JSON-like data structures.</dt><dd>Most JSON Schema implementations can validate data structures in memory, not just JSON documents in a file. Use JSON Schema to write declarative assertions in your application, and compile them into your application.</dd>
	<dt>Validating user input.</dt><dd>Use JSON Schema to verify the range/types of user input is correct and report problems to users, often in fewer lines of code than can be done by hand.</dd>
	<dt>Describing expected input to users.</dt><dd>Share a JSON Schema to express to other parties what input you're expacting, so they can verify correctness before submission.</dd>
	<dt>Add links to plain JSON APIs.</dt><dd>Use JSON Schema to add link relationships to JSON documents in HTTP APIs, allowing hypermedia user agents to browse the API and improve flexibility.</dd>
	<dt>Describe the structure of JSON documents.</dt><dd>Use JSON Schema to describe what each property in a document means, especially for use in IDE hints, or autogenerated documentation.</dd>
	<dt>API documentation.</dt><dd>Use JSON Schema to describe what each property in a document means, especially for use in IDE hints, or autogenerated documentation.</dd>
</dl>

<h2>When not to use JSON Schema</h2>
<p>JSON Schema does not by itself verify the <i>consistentcy</i> of data: There's no standard mechanism to verify that, for example, a given string is a key in a database, or a value elsewhere in the same document. There are some extensions to provide this functionality, but it is currently out-of-scope of the standard vocabulary.</p>

<h2>Fundementals</h2>
<p>The JSON document being validated or described we call the instance, and the document containing the description is called the schema.</p>
<p>The most basic schema is a blank JSON object, which constrains nothing, allows anything, and describes nothing:</p>
<pre type="application/schema+json">{}</pre>
<p>You can apply constraints on an instance by adding validation keywords to the schema. For example, the “type” keyword can be used to restrict an instance to an object, array, string, number, boolean, or null:</p>
<pre type="application/schema+json">{ "type": "string" }</pre>
<p>JSON Schema is hypermedia ready, and ideal for annotating your existing JSON-based HTTP API. JSON Schema documents are identified by URIs, which can be used in HTTP Link headers, and inside JSON Schema documents to allow recursive definitions.</p>

<h2>How JSON Schema works</h2>
<p>A JSON Schema is itself a JSON Document, that is applied against an input, called the <i>instance</i>.</p>
<p>JSON Schema defines the vocabulary that these documents use: what it means when you provide an object or some other value, and what each of the property keywords mean.</p>

<h2>Validating Documents with JSON Schema</h2>
<h3>The "type" keyword</h3>
<p>The <code>"type"</code> keyword asserts that the type of the instance (object, array, string, number, boolean, null) is. You can provide a single type as a string, or list up to all six types in an array. You will typically always want to include this keyword.</p>

		</main>
	</body>
</html>
