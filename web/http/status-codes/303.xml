<!DOCTYPE html>
<html lang="en" dir="ltr"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:w="tag:fullstack.wiki,2018:ns/"
	xmlns:xht="http://www.w3.org/1999/xhtml/vocab#"
>
	<head>
		<meta charset="UTF-8" />
		<title>303 See Other</title>
		<meta name="description" content="The 303 See Other HTTP status code tells clients the request was processed and the workflow can be completed by visiting a different URI." />
		<link rel="up" href="index.xml" />
	</head>
	<body>
		<main about="tag:fullstack.wiki,2018:ns/http/status-codes/303" typeof="w:HTTP-StatusCode">
			<a rel="http://www.w3.org/1999/xhtml/vocab#describedby" href="" />

			<h1>303 See Other</h1>
			<p>The 303 (See Other) HTTP status code indicates that the result of the operation is available at another location. The client should interpret the request as completed, then make a new request to the resource identified by the <a href="../headers/Location.xml">Location header</a>. The new request is made with GET (or HEAD).</p>
			<p>See <a href="../redirect.xml">HTTP Redirection</a> for more information on redirects.</p>
			<aside><p>This status code may be treated like a 2xx status, since it conveys the request was handled by the server.</p></aside>

			<h2>Writing responses (servers)</h2>
			<p>Servers should typically produce <code>303 See Other</code> in response to POST requests, so that after a browser has submitted a form, the browser can make a subsequent safe request with the result. If the server were to write a response to POST directly, the user would be asked to re-submit the form if they refreshed the page or navigated back in history. Using a 303 redirect avoids this. This is called a <i>POST-redirect-GET</i> flow.</p>
			<p>If instead the resource has moved and the client needs to re-make the same request (with the same method and headers) at a different URI, use <a href="307.xml">307 (Temporary Redirect)</a> or <a href="308.xml">308 (Permanent Redirect)</a>.</p>

			<h2>Reading responses (clients)</h2>
			<p>A <code>303 See Other</code> will be accompanied by a <a href="../headers/Location.xml">Location header</a> that indicates the next page that should be loaded.</p>
			<p>The request-URI should not be pushed to the history, so that navigation brings the user to the redirect target, instead of re-issuing the request that caused the 303. If the user intends to re-issue the request, they can re-submit the form.</p>

			<h2>Overview table</h2>
			<dl class="inline">
				<dt>Name</dt>
				<dd property="w:HTTP-StatusCode-value">303</dd>
				<dt>Message</dt>
				<dd property="w:HTTP-StatusCode-line">303 See Other</dd>
				<dt>Description</dt>
				<dd property="w:HTTP-StatusCode-description">The request was completed and the result is available at another location.</dd>
				<dt>Specification</dt>
				<dd property="w:specification"><a href="https://httpwg.org/specs/rfc7231.html#status.303">RFC 7231: HTTP/1.1 Semantics and Content &#xA7;6.4.4. 303 See Other</a></dd>
			</dl>

			<h2>Example</h2>
			<pre type="message/http" w:space="indent">
				HTTP/1.1 303 See Other
			</pre>

			<h2>Implementations</h2>
			<h3>Web browsers</h3>
			<p>Most Web browsers will not save a page returning 303 in the history stack; servers may take advantage of this when handling POST requests to ensure that queries will not be re-submitted by users navigating backwards. This is called a Post-Redirect-Get workflow.</p>

			<h2>See also</h2>
			<ul>
				<li><a href="https://en.wikipedia.org/wiki/HTTP_303">HTTP 303 on Wikipedia</a></li>
				<li><a href="https://evertpot.com/http/303-see-other">HTTP 303 by Evert Pot</a></li>
				<li><a href="https://httpstatusdogs.com/303-see-other">HTTP 303 on HTTP STATUS DOGS</a></li>
			</ul>
		</main>
	</body>
</html>
