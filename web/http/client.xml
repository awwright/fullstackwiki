<!DOCTYPE html>
<html lang="en" dir="ltr" xmlns="http://www.w3.org/1999/xhtml" xmlns:w="tag:fullstack.wiki,2018:ns/">
	<head>
		<meta charset="UTF-8" />
		<title>HTTP Clients</title>
		<meta name="description" content="Making client HTTP requests to a server and processing the response" />
		<link rel="up" href="index.html" />
		<link rel="stylesheet" href="/style/highlight.js/solarized-light.css" />
	</head>
	<body>
		<main>
			<h1>HTTP Clients</h1>
			<p>This document describes how to implement an HTTP client, from deciding which method and resource to request, to processing the response and overcoming errors.</p>

			<h2>Select the HTTP version</h2>
			<p>Absent prior knowledge, use <code>HTTP/1.1</code>. If this is too high for the HTTP server, it will produce an appropriate error, and the request can be retried.</p>

			<h2>Select a method</h2>
			<p>An HTTP request begins with some request to ask for information or manipulate the state of the server. The exact kind of request is specified by selecting an HTTP method:</p>
			<dl class="inline">
				<dt>GET</dt><dd>Request a representation and metadata of a resource</dd>
				<dt>HEAD</dt><dd>Request only metadata about a resource</dd>
				<dt>POST</dt><dd>Have a resource on the server act on or process a client-provided payload</dd>
				<dt>PUT</dt><dd>Store a resource on the server at a specific URI</dd>
				<dt>DELETE</dt><dd>Delete a specific resource on the server</dd>
				<dt>CONNECT</dt><dd>Open a bi-directional communication channel</dd>
				<dt>OPTIONS</dt><dd>Request information about communication options, for specific cases where HEAD cannot be used</dd>
				<dt>TRACE</dt><dd>Sends back the request message, used for debugging proxies/gateways</dd>
			</dl>
			<h2>Select the request URI</h2>
			<p>All requests in HTTP contain some sort of request URI which identifies a resource on the server to be acted on.</p>
			<p>The specific meaning of the URI varies with the method:</p>
			<dl class="inline">
				<dt>GET</dt><dd>The URI of the resource to download</dd>
				<dt>HEAD</dt><dd>The URI of the resource to download (metadata only)</dd>
				<dt>POST</dt><dd>The URI of the resource to process an uploaded document</dd>
				<dt>PUT</dt><dd>The URI to store the uploaded document to, even if it does not exist beforehand</dd>
				<dt>DELETE</dt><dd>The URI of the resource to be deleted</dd>
				<dt>CONNECT</dt><dd>The URI of a resource to (typically on a different server)</dd>
				<dt>OPTIONS</dt><dd>The URI of the resource to get information on</dd>
				<dt>TRACE</dt><dd>Any valid URI</dd>
			</dl>
			<p>For additional information, consult the respective method documentation.</p>

			<h2>Splitting the request-URI</h2>
			<p>For historical reasons, HTTP requires the request URI be split up into several component parts to generate the request.</p>
			<aside><p>Technically, you can send the full request-URI in the request-line. However, this is not well supported by many servers, and is not guarenteed to work.</p></aside>
			<p>For background, consult <a href="headers/Host.html">the Host header</a>.</p>

			<h2>Encode the request-line</h2>
			<p>Two lines are used to form the effective Request URI: the request-line (the first line in the request), and the Host header.</p>
			<p>HTTP allows requests with an absolute-form URI in the request-line, however this is not supported by very many servers, and is typically only used by proxies. That is, a request in absolute form typically indicates a request to make a proxied request, instead of an origin request the server can answer authortatively.</p>
			<p>Most requests will be made with the origin-form:</p>
			<pre type="abnf"> origin-form    = absolute-path [ "?" query ]</pre>
			<p>For example:</p>
			<pre type="message/http" w:space="indent">
				GET /request-URI HTTP/1.1
				Host: www.example.org
			</pre>
			<p>It is not possible to explicitly send the scheme being used HTTP/1.0 or HTTP/1.1 using the origin-form, however the server is usually able to detect the scheme being used. If your networked application needs to support responding to arbritrary URI schemes, consider supporting the absolute-form of requests in your server.</p>

			<!-- TODO mark this as environment-specific -->
			<h3>Host</h3>
			<p>The very first header should be the <code>Host</code> header, since it is related to the request-URI and the request-line.</p>
			<aside><p>Node.js automatically sets the Host header.</p></aside>

			<h2>Optional Date header</h2>
			<p>The Date header is optional for request headers. It can be sent if it would convey useful information to the server.</p>

			<h2>Connection options</h2>
			<h3>Connect header</h3>
			<p>This is a hop-by-hop header and must be modified appropriately by intermediate nodes (gateways and proxies).</p>

			<h2>List acceptable responses</h2>
			<p>Clients may specify the kinds of responses they'd prefer to receive, along a variety of dimensions:</p>

			<h3>Accept-Charset</h3>
			<p>The client can list the kinds of charsets it supports, so that the server may send a variation the client is known to understand.</p>

			<h3>Accept-Encoding</h3>
			<p>The client can list the kinds of content-codings it supports, for example, compressed streams.</p>

			<h3>Accept-Language</h3>
			<p>The client can list the kinds of natural languages the user would prefer to receive.</p>

			<h3>TE</h3>
			<p>The client can list the kinds of Transfer-Encodings it allows (besides "chunked").</p>

			<h2>Authenticating</h2>
			<p>If the server requires authentication, the server may add headers to authenticate itself to the server. Additionally, the server may also perform authentication at the transport layer, for example with TLS certificates, or Unix domain sockets.</p>
			<!-- TODO: Link to page on authentication -->

			<h2>Proxy Authorization</h2>
			<p>Intermediate proxies may require their own authentication to use. Many of the HTTP headers available to authenticate to destination servers also have variants for authenticating to proxies, which will accept and remove the header before forwarding it to the destination server.</p>
			<!-- TODO: Link to page on authentication -->

			<h2>Page navigation data</h2>
			<h3>Referer</h3>
			<p>The <code>Referer</code> header (sic, a misspelling of "Referrer" that happens to save a byte over the wire) specifies the resource where the user-agent found and followed the request-URI for the current request.</p>
			<h3>Cookie</h3>
			<p>If the client chooses to, it may send .</p>
			<p>The formatting of the Cookie header violates HTTP, so it must be treated as a special exemption in code.</p>
			<p>Be very careful when choosing to relay cookies, this makes applications susceptable to ambient authority (confused deputy) attacks if not carefully designed.</p>

			<h2>User agent information</h2>
			<h3>User-Agent</h3>
			<p>The <code>User-Agent</code> header describes for the server the software the client is running, for logging, analytics, or other purposes.</p>
			<p>Sometimes servers use this header to determine what behavior the client supports. in these cases, you may need to modify the header to cajole the server to do the right thing, but avoid doing this unless absolutely necessary.</p>
			<!-- TODO: write section on how to properly masquerade as another client, if/when that's necessary to do -->

			<h3>From</h3>
			<p>The <code>From</code> header field contains an Internet email address for a human user who controls the requesting user agent.</p>
			<p>The header is not indended for typical usage. Use it when running an automated script or bot, so server owners can contact the owner in the event of misbehavior.</p>

			<h3>Related headers</h3>
			<p>Authorization/authentication headers and cookies can also be used to identify the person making the request, see those respective sections for more information.</p>

			<h2>Conditional Request Headers</h2>
			<p>In some cases, the client may want the server to only conditionally evaluate the request, for example, modify a resource only if it is is unchanged on the server, or download the resource only if it has changed since the last download. In these cases, use conditional headers.</p>
			<h3>If-Match</h3>
			<h3>If-None-Match</h3>
			<h3>If-Modified-Since</h3>
			<h3>If-Unmodified-Since</h3>
			<h3>If-Range</h3>

			<h2>Encode the payload if any</h2>
			<h3>Content-Type, Content-Encoding</h3>
			<p>The Content-Type and Content-Encoding headers specify how the server must decode the information contained in the request-body.</p>

			<h3>Content-Language</h3>
			<p>If the document is known to have a specific language, it can be conveyed in the <code>Content-Language</code> header.</p>

			<h3>Content-Location</h3>
			<p>If the document was requested earlier from a particular effective request URI, it can be provided here.</p>
			<!-- TODO: uh why would you actually do this -->

			<!-- It is feasable that Content-Range might be used here -->

			<h2>Generate the request-body</h2>

			<p>Requests may attach a request body, a document uploaded with the request. The specific meaning varies with the request method:</p>
			<dl class="inline">
				<dt>GET</dt><dd>Meaning is undefined</dd>
				<dt>HEAD</dt><dd>Meaning is undefined</dd>
				<dt>POST</dt><dd>Read by the server, frequently used to create a new resource</dd>
				<dt>PUT</dt><dd>The document to be saved to the server</dd>
				<dt>DELETE</dt><dd>Not allowed</dd>
				<dt>CONNECT</dt><dd>?</dd>
				<dt>OPTIONS</dt><dd>?</dd>
				<dt>TRACE</dt><dd>Not allowed</dd>
			</dl>
			<p>The request body is typically only used for the <code>PUT</code> and <code>POST</code> methods.</p>

			<h3>Set Expect header</h3>
			<p>If the client has reason to believe the upload may be too large for the server to accept, it can indicate this with an Expect header:</p>
			<!-- Each line is assumed to have a CRLF, but show it on the last one for clarity -->
			<pre type="message/http" w:space="indent">
				PUT /somewhere/fun HTTP/1.1
				Host: origin.example.com
				Content-Type: video/h264
				Content-Length: 1234567890987
				Expect: 100-continue
				&#x240D;&#x240A;
			</pre>
			<p>Clients that send this must attach a request-body.</p>
			<p>Clients should send the request body after a brief period of time without a response from the server (about a second), in the event of misimplementation or network problems.</p>
			<p>If the client receives 417 Expectation Failed instead of 100 Continue, the server (or request path) does not support 100 Continue, and the request should be retried without using the 100-continue feature (remake the request attaching the entire request-body to the request).</p>

			<h2>Lookup request from cache</h2>
			<p>If a similar request has been made, the request might be able to be served from cache.</p>
			<p>Several headers specify if the response is cachable:</p>
			<ul>
				<li>Age</li>
				<li>Cache-Control</li>
				<li>Expires</li>
				<li>Pragma</li>
				<li>Warning</li>
			</ul>
			<!-- Point to page on computing caching key for further information -->

			<h2>Parsing the Response</h2>
			<p>At this point we wait for the response from the server.</p>

			<h2>Parse zero or more 1xx responses</h2>
			<!-- Implement RFC7231 6.2. Informational 1xx -->
			<p>HTTP/1.1 and above defines the <i>1xx</i> status code class, which is an informational header sent before the final status code, that can encode information for the client before the final response has been generated or decided on.</p>

			<h3>Compute effective request URI</h3>
			<p>This identifies the URI that the server stores the selected representation at. If the client wants to get the same variation of the resource in the future, it should use this URI. It may be different than the URI requested by the client, if the server performed Content-Type negotiation.</p>
			<p>However, due to lack of implementation by Web browsers, this aspect was removed. Hypermedia documents should embed their URI in the document, such as the HTML <code>&lt;base/&gt;</code> tag</p>

			<h2>Compute the Caching Key for response</h2>
			<p>A caching key can be computed to determine if another future request can be served from a cache, instead of the origin server.</p>
			<p>This is derived from an algorithm that takes into account the effective request-URI (see above), and several headers specified in the Vary header of the response.</p>
			<!-- Point to page on computing caching key for further information -->

			<h2>Parse Set-Cookie header</h2>
			<p>The <code>Set-Cookie</code> header follows a nonstandard syntax that cannot be folded the same way as other headers can. Even if you don't intend on storing cookies, note that the Set-Cookie header requires special processing.</p>

			<h3>Store Session Data</h3>
			<p>The contents of the <code>Set-Cookie</code> header can be stored for subsequent requests.</p>

			<h2>Determine if there is a request-body</h2>
			<h3>If there's a request-body, decode Content-Encoding</h3>
			<blockquote><p>If one or more encodings have been applied to a representation, the sender that applied the encodings MUST generate a Content-Encoding header field that lists the content codings in the order in which they were applied.</p></blockquote>

			<h3>Read language of request</h3>
			<p>HTTP allows the sender to identify the primary language of the entity body (request body or response body) using the <code>Content-Language</code> header.</p>

			<h3>Determine Content-Type</h3>
			<p>The <code>Content-Type</code> header determines which <i>media type</i> will be used to decode the entity-body.</p>
			<p>Generally for every media type, there is a single specification that specifies how to parse and use the document.</p>

			<h2>Read response body</h2>
			<!-- Implements RFC7230 3.3.3. Message Body Length -->
			<p>The presence of a message body in a request is signaled by a Content-Length or Transfer-Encoding header field.</p>
			<p>The number of bytes to read depends on the request method, the response code, and headers present:</p>
			<ol>
				<li>If the request is a HEAD request, there is no response body. Response length information, if present, describes how long an otherwise identical GET request would have been.</li>
				<li>A CONNECT request becomes a tunnel immediately after the response headers are written, as there is no concept of a response body.</li>
				<li>If the outermost applied Transfer-Encoding (if any) is "chunked", the response body ends when the chunked parsing does.</li>
				<li>If there is any other Transfer-Encoding, the message can only be ended when the server closes the connection.</li>
				<li>If there is a single Content-Length header (or multiple identical values), then read that many bytes.</li>
				<li>If this is an HTTP/1.0 request, or if the response specifies <code>Connection: close</code>, read until the server closes the connection.</li>
				<li>Otherwise, raise an error that there is no reliable way to determine when the response ends.</li>
			</ol>
			<p>Additionally, it's not possible to distinguish between some types of connection errors and the server closing the connection.</p>
			<h2>Overview table</h2>
			<dl class="inline">
				<dt>Specification</dt>
				<dd property="specification"><a href="https://httpwg.org/specs/rfc7230.html#effective.request.uri">RFC 7230: Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing &#xA7;5.5. Effective Request URI</a></dd>
			</dl>
		</main>
	</body>
</html>
