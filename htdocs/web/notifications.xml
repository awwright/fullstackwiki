<!DOCTYPE html>
<html lang="en" dir="ltr" xmlns="http://www.w3.org/1999/xhtml" xmlns:w="tag:fullstack.wiki,2018:ns/">
	<head>
		<meta charset="UTF-8" />
		<title>Notifications on the Web</title>
		<meta name="description" content="Notifications on the Web" />
		<link rel="up" href="index.xml" />
	</head>
	<body>
		<main>
			<h1>Notifications on the Web</h1>
			<p>The Web is optimized for client-server access, meaning that servers do not speak to clients unless spoken to. Occasionally, users may wish to reverse this paradigm, so that a server can "push" new information to a client as soon as it becomes available.</p>
			<p>For example, a user wishes to be notified when a blog post is published, when an email is received, or when a long operation has just completed.</p>
			<p>There are are multiple different mechanisms that may be used to send a notification to a user, the best solution will vary depending on what the user prefers and is capable of receiving.</p>

			<h2>Classes of Notifications</h2>
			<p>Notifications may be classified based on the user's perspective:</p>
			<ul>
				<li>Was the notice emitted in response to a first-, second-, or third-party event? That is, was the user anticipating the notice (e.g. a payment accepted notification); was it generated by the sender (terms of service update); or was it another user entirely (a message was posted to a mailing list)?</li>
				<li>Does this happen on a recurring basis? For example, a delivery service may notify a customer about every package, even unsolicited packages; but the storefront filling the order will only send one "package delivered" message every time the user places an order.</li>
				<li>Is it sent to multiple people at once? For example a package delivery only notifies one person; a price drop may notify multiple people who each requested to be notified; and a chat message may notify the entire channel.</li>
			</ul>

			<h3>Transactional Notifications</h3>
			<p>Transactional notifications are typically emitted once, to a single user, in response to some previous request by a user. For example, a user account has been registered, a product has shipped, payment has been approved, or a batch operation has completed. These types of notifications are the type used by <a href="../http/asynchronous.xml">asynchronous HTTP operations</a>.</p>

			<h3>Subscription Notifications</h3>
			<p>Subscription notifications are emitted to any number of people at once on a recurring basis. For example, a blog post has been published, or a marketing department is announcing a sale.</p>
			<p>Most marketing emails are subscription notifications, even if they are customized for each user, or only sent to one user. However, some exceptions exist, for example, if a user has specifically toggled an option such as "Notify me when the price drops", this could be considered a transactional notification.</p>

			<h3>Mass Transactional Notifications</h3>
			<p>A mass transactional notification is a variation of a transactional notification that is delivered to multiple people (and so could also be considered subscription notification), typically in about an event by a third party. For example, a user pinged multiple people in a chat channel, or a message was posted to a mailing list. Is transactional in the sense that it happened in response to an event, but the receiving user views it like a subscription notification, because it happens on a recurring basis, and they may disable the notifications.</p>
			<p>Email vendors that only permit transactional notifications may or may not permit a mass transactional notification, depending on the content and nature of the message; and different vendors will draw the line in different places.</p>

			<h3>Cascades of notifications</h3>
			<p>A notification can start a chain of other notifications, each of which might be classified differently. For example, a mass marketing email delivered to a user's inbox would be considered a subscription notification, but the <i>fact</i> that the email was received, when pushed to a user's mobile device by the user's email host, is a transactional notification.</p>


			<h2>On-demand Requests</h2>
			<p><i>On demand notifications</i> are downloaded by the client whenever they check for new notifications. This typically involved issuing a GET request, and the server responds with a list of recent or new events.</p>

			<h3>Polling at regular intervals</h3>
			<p>When a user makes regular requests to check for notifications that may occur on a regular basis. This is the simplest, purely-HTTP method for checking for updates, but can needlessly consume resources and can delay receipt of notifications. This is typically combined with <a href="headers/If-Modified-Since.xml">If-Modified-Since</a> to only receive a response if the server has new information to be read.</p>

			<h3>Polling with exponential backoff</h3>
			<p>When a user-agent is expecting a transactional notification (that only happens once), it may be a better use of resources to increase the duration between refreshes.</p>

			<h3>Feed (Atom/RSS)</h3>
			<p>Standardized formats like Atom or RSS are designed to provide a list of messages as a <i>feed</i>.</p>


			<h2>Realtime Response</h2>
			<p>A realtime response is when the user connects to a server, and receives a message as a client on the connection.</p>

			<h3>Long polling</h3>
			<p>A technique where an HTTP server waits to respond to a request until it has new information. This may be implemented with <a href="headers/If-Modified-Since.xml">If-Modified-Since</a>, and a request header specifying to wait until there is new data, instead of responding with 304 (Not Modified).</p>

			<h3>Websockets</h3>
			<p>A datagram protocol specifically designed for shuttling arbitrary messages asynchronously, tunneled over HTTP.</p>

			<h3>HTTP 102 (Processing)</h3>
			<p>The <a href="../http/status-codes/102.xml">102 (Processing) HTTP status code</a> may be used to indicate that something has happened, any time before the response has been generated. It cannot attach a payload, but the user may then make a request to retrieve the new information.</p>


			<h2>Realtime Push</h2>
			<p>A realtime push is when the service connects to a remote server operated by the user (or on behalf of the user).</p>

			<h3>Callback endpoint (Webhooks)</h3>
			<p>A technique where a user registers a URL endpoint with a service, with which notifications are delivered using a POST request to that endpoint. Implementations must be careful to check the authenticity of notifications, since the endpoint is typically accessible on the public Internet.</p>
			
			<h3>Email</h3>
			<p>Perhaps the oldest and most well known real-time notification mechanism. Email supports sending signed machine-readable documents, but is typically used for sending formatted messages for people to read.</p>

			<h3>Web Push</h3>
			<p>A protocol optimized for sending notifications to mobile devices.</p>
			
			<h3>CoAP Observe</h3>
			<p>CoAP is an HTTP-compatible, binary protocol deployed over UDP, designed for Internet-of-Things devices. It has support for pushing changes to listening devices with limited processing and memory capability, described in <a href="https://tools.ietf.org/html/rfc7641">RFC 7641</a>, and may be deployed over WebSockets for use in Web browsers, described in <a href="https://tools.ietf.org/html/rfc8323">RFC 8323</a>.</p>

			<h2>Examples/Implementations</h2>
			<ul>
				<li><a href="https://developer.github.com/webhooks/">GitHub's Webhooks</a></li>
			</ul>

			<h2>See also</h2>
			<ul>
				<li><a href="https://requestbin.com/blog/working-with-webhooks/">RequestBin: Webhooks â€” The Definitive Guide</a></li>
				<li><a href="https://tools.ietf.org/html/rfc8030">Generic Event Delivery Using HTTP Push</a></li>
				<li><a href="https://tools.ietf.org/html/rfc8291">Message Encryption for Web Push</a></li>
				<li><a href="https://tools.ietf.org/html/rfc8292">Voluntary Application Server Identification (VAPID) for Web Push</a></li>
				<li><a href="https://w3c.github.io/push-api/">Push API</a></li>
			</ul>
		</main>
	</body>
</html>
