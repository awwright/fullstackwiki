<!DOCTYPE html>
<html lang="en" dir="ltr" xmlns="http://www.w3.org/1999/xhtml" xmlns:w="tag:fullstack.wiki,2018:ns/">
	<head>
		<meta charset="UTF-8" />
		<title>Asynchronous Operations in HTTP</title>
		<meta name="description" content="Asynchronous Operations in HTTP" />
		<link rel="up" href="index.xml" />
	</head>
	<body>
		<main>
			<h1>Asynchronous Operations in HTTP</h1>

			<p>An <i>asynchronous operation</i> in HTTP is a request that the server will continue processing after the request returns, and can change the state of the server over time as the operation is being processed. This is in contrast to the typical "synchronous"  request whose effects, if any, do not occur after the response.</p>

			<p>Asynchronous operations are useful for any sort of operation that runs a very long time (which is anything than a few seconds for many applications), or when recovering from a network failure is important.</p>

			<p>Suppose a person owns a newfangled electric tea kettle running an HTTP server; how can other devices use this to listen for when the kettle is finished boiling water? We don't know quite when the task will complete; but we want to receive a message when the <i>operation</i> completes. This is called an <i>asynchronous operation</i> in HTTP.</p>

			<p>Use the "asynchronous operation workflow" when you need to support:</p>
			<ul>
				<li>Receiving a notification when an operation finishes, e.g. when a tea kettle has finished boiling water</li>
				<li>Receiving a notification when an event happens, e.g. when a new blog post is published</li>
			</ul>

			<h2>Mechanisms for returning an Asynchronous Response</h2>
			<ul>
				<li><a href="preferences/respond-async.xml">Prefer: respond-async</a></li>
				<li><a href="status-codes/102.xml">102 (Processing)</a></li>
				<li><a href="status-codes/202.xml">202 (Accepted)</a></li>
				<li>Websockets</li>
				<li>Web Push</li>
				<li>Hook endpoints (Webhooks)</li>
				<li>Polling with exponential backoff</li>
				<li>Long polling</li>
				<li>Email</li>
			</ul>

			<h2>Glossary</h2>
			<dl>
				<dt>Event</dt><dd>A change in the state of the service, that a user may wish to know about as soon as possible.</dd>
				<dt>Service</dt><dd>The party that is typically the server; but may use a client when delivering a notification to a user of the service.</dd>
				<dt>User</dt><dd>The party that is typically the client; but may also run a server in order to receive notifications from the service.</dd>
				<dt>Request</dt><dd>A standard HTTP request that synchronously returns a response; the request may kick off new operations and subscriptions that run after the request has returned.</dd>
				<dt>Operation</dt><dd>A request by a user for the service to perform a task; that may generate events until the operation completes.</dd>
				<dt>Notification</dt><dd>A message that a service wants to deliver to a user, conveying newly available information.</dd>
				<dt>Subscription</dt><dd>A request by a user to receive notifications from a service, until the user decides to stop listening.</dd>
			</dl>

			<h2>Mechanisms for real-time notifications</h2>
			<p>The simplest mechanism is to make the results of the operation available from a resource that the user must poll: re-request until the resource says the operation is complete.</p>
			<p>The other way to receive a <i>notification</i> from the service. The user must either run a server listening for a message, or the user must connect to a service where they may receive an message in real time.</p>
			<dl>
				<dt>Websockets</dt>
				<dd>A datagram protocol specifically designed for shuttling arbitrary messages asynchronously, tunneled over HTTP.</dd>

				<dt>Web Push</dt>
				<dd>A protocol optimized for sending notifications to mobile devices.</dd>

				<dt>Hook endpoints (Webhooks)</dt>
				<dd>A technique where a user registers a URL endpoint with a service, with which notifications are delivered using a POST request to that endpoint. Implementations must be careful to check the authenticity of notifications, since the endpoint is typically accessible on the public Internet.</dd>

				<dt>Polling with exponential backoff</dt>
				<dd>The first purely-HTTP method of checking for updates. This is typically combined with <a href="headers/If-Modified-Since.xml">If-Modified-Since</a> to only receive a response if the server has new information to be read.</dd>

				<dt>Long polling</dt>
				<dd>A technique where an HTTP server waits to respond to a request until it has new information. This may be implemented with <a href="headers/If-Modified-Since.xml">If-Modified-Since</a>, and a request header specifying to wait until there is new data, instead of responding with 304 (Not Modified).</dd>

				<dt>Email</dt>
				<dd>Perhaps the oldest and most well known real-time notification mechanism. Email supports sending signed machine-readable documents, but is typically used for sending formatted messages for people to read.</dd>
			</dl>

			<h3>Status Codes</h3>
			<p>This is an overview on how clients should handle status codes relating to an operation they requested.</p>
			<p>What important distinctions does a client need to know about?</p>
			<ul>
				<li>Operation finished</li>
				<li>Operation successful</li>
				<li>Operation result URI with additional information about the request</li>
			</ul>
			<table>
				<thead>
					<tr><th>Status Code</th><th>Complete</th><th>Successful</th></tr>
				</thead>
				<tbody>
					<tr><th>200 OK</th><td>Yesâœ…</td><td>Yesâœ…</td></tr>
					<tr><th>201 Created</th><td>Yesâœ…</td><td>Yesâœ…</td></tr>
					<tr><th>202 Accepted</th><td>NoðŸ‘Ž</td><td>Indeterminate</td></tr>
					<tr><th>303 See Other</th><td>Yesâœ…</td><td>Unknown</td></tr>
				</tbody>
			</table>

			<h2>Suggested Asynchronous Flow</h2>
			<p>An asynchronous workflow begins when a client makes an unsafe request (typically POST, but potentially any unsafe method). Handling begins by collecting data necessary to begin the operation. Typically, the user should provide all the information necessary for the service to run the entire operation.</p>
			<p>The information collected should include the client's preferences for reading the result. Many of these preferences are provided in a <a href="headers/Prefer.xml">Prefer request header</a>. Other service-specific preferences should be accepted in the request body.</p>
			<p>Once the service has received data from the user's client, the operation may be split up into multiple phases:</p>

			<h3>Synchronous return</h3>
			<p>The <i>synchronous return phase</i> is the phase the short period of time (preferably less than one second) where the service is acting similar to a synchronous request. This includes reading the upload (if any), parsing it, checking for obvious errors, and responding to errors that prevent a background operation from being kicked off.</p>

			<h3>Wait</h3>
			<p>The <i>wait phase</i> occurs after the client has determined it may begin working on the operation, but does not know how long the operation will take to complete. At this point, the server should send a <a href="status-codes/102.xml">102 (Processing)</a> intermediate response to let the client know that processing has begun. The server may send a 102 (Processing) every few seconds to keep the client informed that the operation is still processing.</p>
			<p>The client may specify a maximum duration for this phase with the <a href="preferences/wait.xml">wait</a> HTTP preference. The server may also enforce its own maximum wait time, typically to conserve server resources and mitigate risk of network failures. If the operation completes within this time, the service may generate a synchronous response.</p>
			<p>If the operation exceeds the "wait" duration, or it becomes clear the operation will take longer than this, the service may immediately move to the next phase, to background the operation.</p>
			<p>In many cases, the operation will always be longer than the duration the server is prepared to wait, in which case this phase will always be very short.</p>

			<h3>Accepted into background</h3>
			<p>The <i>accepted into background phase</i> occurs once the service knows that the operation will take a very long time to finish; and so wishes to end the initial request with a <a href="status-codes/202.xml">202 (Accepted)</a> response. This tells the client that the operation is still being processed, and it will need to make additional requests or listen for notifications in order to know when the operation finishes.</p>
			<p>This response may include a few elements:</p>
			<dl>
				<dt>Content-Location header</dt>
				<dd>Specifies where the representation of this response may be re-requested from. It may change over time as the operation progresses, but cannot be content-type negotiated.</dd>
				<dt>Location header</dt>
				<dd>Presumably, this specifies a resource related to the current one, in a similar fashion to 201 (Created).</dd>
				<dt>Link header</dt>
				<dd>The Link header may specify additional resources and their relationship to the current request.</dd>
			</dl>
			<aside>
				<p>There is no standardized mechanism to follow-up on requests, so clients will have to be service/application specific. In particular, the meaning of the Location header is undefined in 202 responses.</p>
				<p>The semantics of the Link header aren't immediately clear for responses besides GET/HEAD requests: is the link from the response body, the Content-Location, or the effective request URI?</p>
			</aside>
			<p>With this information, the client may make additional information to retrieve the status of the request.</p>
			<p>The client may also receive notifications from the service when the status of the operation changes in a significant way, for example, it has completed, failed, or requires additional information. Depending on the notification method, the client registers contact information with the service during the initial request.</p>

			<h3>Information collection</h3>
			<p>An <i>information collection event</i> occurs when the service requires additional information in order to continue processing. Typically, the initial request should provide all the information necessary to complete the request, so this usually indicates that human intervention is necessary.</p>
			<p>If this occurs during the synchronous or wait phases, this immediately accepts the operation into the background, since this pauses operation indefinitely. The client at this point will read the response, and determine how to respond to it.</p>

			<h2>Examples/Implementations</h2>
			<ul>
				<li><a href="https://developer.github.com/webhooks/">GitHub's Webhooks</a></li>
			</ul>
			<aside><p>If you know of additional examples, please add or submit them.</p></aside>

			<h2>See also</h2>
			<ul>
				<li><a href="https://requestbin.com/blog/working-with-webhooks/">RequestBin: Webhooks â€” The Definitive Guide</a></li>
				<li><a href="https://tools.ietf.org/html/rfc8030">Generic Event Delivery Using HTTP Push</a></li>
				<li><a href="https://tools.ietf.org/html/rfc8291">Message Encryption for Web Push</a></li>
				<li><a href="https://tools.ietf.org/html/rfc8292">Voluntary Application Server Identification (VAPID) for Web Push</a></li>
				<li><a href="https://w3c.github.io/push-api/">Push API</a></li>
			</ul>
		</main>
	</body>
</html>
