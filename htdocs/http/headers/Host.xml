<!DOCTYPE html>
<html lang="en" dir="ltr" xmlns="http://www.w3.org/1999/xhtml" xmlns:w="tag:fullstack.wiki,2018:ns/">
	<head>
		<meta charset="UTF-8" />
		<title>Host</title>
		<meta name="description" content="Specifies the hostname for reconstructing the Request-URI" />
		<link rel="up" href="index.xml" />
		<link rel="stylesheet" href="/style/highlight.js/solarized-light.css" />
	</head>
	<body>
		<main about="tag:fullstack.wiki,2018:ns/http/headers/Host" typeof="w:HTTP-Header">
			<a rel="http://www.w3.org/1999/xhtml/vocab#describedby" href="" />

			<h1>Host</h1>
			<p>The <code>Host</code> header specifies the authority component of the request-URI.</p>

			<h2>Preface</h2>
			<p>In the olden days, the Web was a much simpler place. An HTTP server was assumed to serve a single set of documents, and that's as good a job it could be expected to do. However, this effectively prevented people from pointing their domain name to a server already hosting a website, and so caused growth problems. This was formalized as developments in networked application design specified that the URL is a subset of the URI, and names things in general, without necessarially pointing to a network location, so that servers should be able to respond to requests for <em>any</em> resource under an authority routed to them.</p>
			<p>And so the Host header was introduced to HTTP, which more or less provides enough information to reconstruct the full Request-URI that the client is looking for. It is a required request header.</p>

			<h2>Making Requests</h2>
			<p>The Host header is required, even if it would be redundant or the receiving end is known to not support the header. The value must be a valid hostname and optional port, and match the hostname part of the authority of the Request-URI; or left blank if the URI has no authority component (the part after the leading "//").</p>
			<p>Since the value is used to construct the Request-URI and is used for routing, it should be placed as the first header (closest to the Request-Line of the HTTP request), for example:</p>

			<pre type="message/http" w:space="indent">
				GET /pub/WWW/ HTTP/1.1
				Host: www.example.org
			</pre>

			<h2>Parsing Requests</h2>
			<p>If a request lacks or has more than one Host header, it MUST generate a <code>400 Bad Request</code> response.</p>
			<p>The Host header is used to construct the effective Request-URI. This is described in <a href="../request-uri.xml">Effective Request URI</a>.</p>

			<h2>Overview table</h2>
			<dl class="inline">
				<dt>Name</dt>
				<dd property="w:HTTP-Header-name">Host</dd>
				<dt>Description</dt>
				<dd property="w:HTTP-Header-description">Specifies the authority component of the request-URI.</dd>
				<dt>Direction</dt>
				<dd property="w:HTTP-Header-direction">Request</dd>
				<dt>Specification</dt>
				<dd property="w:specification"><a href="https://httpwg.org/specs/rfc7230.html#header.host">RFC 7230: HTTP/1.1: Message Syntax and Routing &#xA7;5.4. Host</a></dd>
			</dl>

			<h2>Syntax</h2>
			<pre type="abnf">Host = uri-host [ ":" port ]</pre>

			<h2>Implementations</h2>

			<h3>Node.js (http/https)</h3>
			<p>Node.js automatically ignores repeated Host headers. If strict HTTP compliance is required, it may be necessary to scan the <code>request.rawHeaders</code> data.</p>

		</main>
	</body>
</html>
