<!DOCTYPE html>
<html lang="en" dir="ltr"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:w="tag:fullstack.wiki,2018:ns/"
	xmlns:xht="http://www.w3.org/1999/xhtml/vocab#"
>
	<head>
		<meta charset="UTF-8" />
		<title>HTTP resumable uploads</title>
		<meta name="description" content="Different ways to break apart a single HTTP upload into multiple parts." />
		<link rel="up" href="index.xml" />
	</head>
	<body>
		<main>
			<h1>HTTP resumable uploads</h1>
			<p><i>Also called multi-part uploads (not to be confused with the <code>multipart/</code> top-level media type).</i></p>
			<p>There is no standard way to resume an upload to a server after it has been interrupted. Implementations commonly utilize a POST request to allocate space on the server, then issue several more requests to write the data onto that space. The implementation will typically provide a way of reading the status of the upload, including: parts uploaded, amount remaining, errors, and result document.</p>

			<h2>Option: PATCH with a segmented upload media type</h2>
			<p>A PATCH request is capable of creating a new resource; combined with a media type that describes the specific byte ranges to be written to, a client would be capable of creating a new document split across several PATCH requests. See <a href="https://datatracker.ietf.org/doc/draft-wright-http-partial-upload/">draft-wright-http-partial-upload</a>.</p>

			<h2>Option: POST with 201 Accepted response</h2>
			<p>The client can send a POST request indicating a resource was created that may be used to send uploaded data. The 201 Accepted body will contain instructions on how to upload the remaining data. Once the data is completely uploaded, the asynchronous operation may resolve itself (the same way other asynchronous operations complete, if there are any).</p>

			<h2>Option: Expect header with Range header</h2>
			<p>The Range header is not defined for use in requests, because if the server did not understand the header, it would ignore it, overwriting the entire file with the partial contents; which is probably not what the client wants in any circumstances.</p>
			<p>In a hypothetical extension of HTTP, a client could use the <a href="headers/Expect.xml">Expect header</a> header to indicate it is using the <a href="headers/Range.xml">Range header</a> in a non-compatible manner. Servers would stop the request if they don't understand the Expect or Range header in a request. For example:</p>
			<code w:space="indent">
				PUT /document.txt HTTP/1.1
				Expect: Range
				Range: bytes 0-99/100
			</code>

			<h2>Option: URI query parameter</h2>
			<p>A subset of the URI template option, where a server exposes a URI parameter that selects a specific range of the document. For example, you could use <code>PUT http://example.com/IMG2000.jpg?range=0-999</code> to write to only the first 1000 bytes of the document. Servers typically ignore unknown URI query parameters, so clients must have some way of knowing the server will apply the range.</p>
			<p>This is a good solution for coupled APIs, but is difficult to build into Web browsers because there is no standardized mechanism to discover this capability.</p>

			<h3>URI Template</h3>
			<p>One way a server may advertise the format for the URI query parameter, and support for partial uploads, is with a URI Template.</p>

			<h2>References</h2>
			<ul>
				<li><a href="https://tus.io/protocols/resumable-upload.html">TUS protocol</a></li>
				<li><a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html">AWS S3 multipart upload (MPU) protocol</a></li>
				<li><a href="https://developers.google.com/drive/api/v3/manage-uploads#resumable">Google Drive protocol</a></li>
				<li><a href="https://docs.microsoft.com/en-us/rest/api/storageservices/put-range">Microsoft Azure protocol</a></li>
				<li><a href="https://datatracker.ietf.org/doc/draft-wright-http-partial-upload/">draft-wright-http-partial-upload</a></li>
			</ul>
		</main>
	</body>
</html>
