<!DOCTYPE html>
<html lang="en" dir="ltr" xmlns="http://www.w3.org/1999/xhtml" xmlns:w="tag:fullstack.wiki,2018:ns/">
	<head>
		<meta charset="UTF-8" />
		<title>HTTP Servers</title>
		<meta name="description" content="Accepting requests from a client and generating a response" />
		<link rel="up" href="index.xml" />
		<link rel="stylesheet" href="/style/highlight.js/solarized-light.css" />
	</head>
	<body>
		<main>
			<h1>HTTP Servers</h1>
			<p>This document describes how to implement an HTTP server, from an incoming client request to closing the response.</p>
			<p>Intermediate nodes (gateways and proxies) must also follow the behavior <a href="client.xml">for clients</a>, since they are making (forwarding) requests, as well as accepting them.</p>
			<p>Not every section will be applicable to each server, read carefully.</p>

			<h2>Listening for Requests</h2>
			<p>There are multiple ways to listen for HTTP requests, and you may wish to implement more than one of them.</p>
			<p>HTTP is primarily defined in the concrete message syntax, shared by HTTP/1.x and is similar to MIME, used for email. HTTP servers should typically always listen on HTTP/1.x (HTTP/1.x refers to both HTTP/1.1 and HTTP/1.0).</p>
			<p>HTTP/1.x by default listens on TCP port 80, and HTTP over TLS on port 443. HTTP also provides alternate ports 8008 and 8080, which is useful for origin servers behind a gateway/firewall, if a unix socket cannot be used.</p>
			<!-- Implements RFC7230 6.1. Connection - TODO: describe some of the attacks and mitigations -->
			<p>Servers are expected to be robust against denial-of-service attacks.</p>
			<p>An incoming connection might not necessarily be the one making the requests, and a connection might send requests from many different user agents.</p>
			<!-- TODO: cover other HTTP versions and compatible protocols -->

			<h2>Status codes and emitting errors</h2>
			<p>Some operations below speak of emitting an error, or emitting a status code. This means the response to that request will be a status code (4xx or 5xx if an error), generating a document describing the error (if allowed), and further handling of the request will end (except as necessary to unlock and clean up resources, etc).</p>

			<h3>Retry-After</h3>
			<p>In certain cases, especially due to server load or unrecognized parameters from the client, the server may want to advertise how long the client should wait to retry a request. Use the <a href="headers/Retry-After.xml">Retry-After</a> header to specify this.</p>

			<h2>Handle rate limiting and overload condition</h2>
			<!-- Implements RFC7231 6.6.4. 503 Service Unavailable -->
			<p>In some cases, especially for closed applications, servers may want to signal they are overloaded and the request should be retried at a later date. In this case, the server may respond with <a href="status-codes/503.xml">503 (Service Unavailable)</a>. The server should accompany this with a <code>Retry-After</code> header.</p>

			<h2>Parse incoming request headers (HTTP/1.x)</h2>
			<p>Except for the simplest of embedded routers, most implementations will need to parse all of the request headers and buffer them in memory, since headers may be specified in any order.</p>

			<h3>Header length limits</h3>
			<!-- Implements RFC6585 5. 431 Request Header Fields Too Large -->
			<!-- Implements RFC7231 6.5.12. 414 URI Too Long -->
			<p>While HTTP does not specify any specific limits on headers, servers may emit an error if a request has exceeded resource limits:</p>
			<!-- Pull some sensible values from Apache HTTPD: http://httpd.apache.org/docs/2.2/mod/core.html#limitrequestline -->
			<dl>
				<dt>414 (URI Too Long)</dt><dd>When the request-URI is very long (this length is 8190 in Apache HTTPD)</dd>
				<dt>431 (Request Header Fields Too Large)</dt><dd>When there's a header that's too long, or too many headers. Send this when a header name is very long (the longest known header plus some amount to accommodate new headers without interrupting client requests, about 100 bytes), when the value is very long (8190 bytes in Apache HTTPD), or when there's too many headers (100 count in Apache HTTPD)</dd>
			</dl>
			<p>If the server statically knows all of the resources it needs to process, the request URI limit should be at least as large as the largest URI.</p>
			<p>Resource limits for the request-body are treated below.</p>

			<h3>HTTP version</h3>
			<p>The HTTP version is specified on the first line, the request-line, for example:</p>
			<pre type="message/http" w:space="indent">
				GET /where?q=now HTTP/1.1
			</pre>
			<p>If the HTTP-version is not <code>HTTP/1.<i>x</i></code>, where <code><i>x</i></code> is some digit, then return <code>505 (HTTP Version Not Supported)</code>.</p>
			<!-- https://httpwg.org/specs/rfc7230.html#http.version -->

			<h2>Consume Connection headers</h2>
			<p>Several headers are hop-by-hop headers and must be modified by, or set by, every node along the request pipeline.</p>
			<p>These headers are typically managed by HTTP request libraries. And request libraries should not allow programs to set these headers (except for debugging purposes).</p>

			<h3>Connection header</h3>
			<!-- Implements RFC7231 5.1.2. Max-Forwards -->
			<p>In HTTP/1, <a href="headers/Connection.xml">Connection header</a> lists header names and special flags that apply to the current, hop-by-hop connection (instead of the HTTP message itself).</p>
			<p>Do not forward the <code>Connection</code> header, nor any headers named within it.</p>
			<p><code>Connection</code> may also list <code>close</code> as a flag indicating the connection will be closed at the end of this request. See "Clean up connection" below for how to handle this flag.</p>

			<h2>Verify connection requirements</h2>
			<h3>Validate Expect header</h3>
			<!-- Implements RFC7231 5.1.1. Expect -->
			<p>The <a href="headers/Expect.xml">Expect header</a> enumerates the features the client expects the endpoint to implement in order to be able to correctly parse a request or response.</p>
			<p>If the header is set, and is something besides <code>100-continue</code> (case-insensitive), emit 417 (Expectation Failed).</p>
			<p>If the value is "100-continue", the server will need to emit a 100 (Continue) header before the client begins uploading its request-body (implemented below)</p>

			<h3>Validate Host header</h3>
			<!-- Implements RFC7230 5.4. -->
			<p>HTTP/1.1 clients MUST send a <a href="headers/Host.xml">Host header</a>, even when using the absolute-form or with a request URI with no authority (in which case the header will be empty).</p>
			<p>If the request lacks a Host header, or has more than one Host header, return status 400 (Bad Request).</p>

			<h2>Compute effective request URI</h2>
			<p>In HTTP/1, two lines are used to form the <a href="request-uri.xml">effective Request URI</a>: the request-line (the first line in the request), and the Host header.</p>
			<p>In HTTP/2, multiple <i>pseudo-headers</i> form the effective request URI; the URI is broken apart to take advantage of HTTP header compression.</p>
			<p>If the asterisk-form is used with a method besides OPTIONS, emit 405 (Method Not Allowed).</p>
			<p>If the authority-form is used with a method besides CONNECT, emit 405 (Method Not Allowed).</p>

			<h2>Route Request-URI</h2>
			<p>HTTP servers may act as intermediaries and forward the HTTP message to another server; if and where the message is forwarded to may vary by the scheme, authority, or path component of the URI.</p>
			<p>If the server is forwarding the message to another node instead of handling it as an origin, it must implement the <code>Via</code> and <code>Max-Forwards</code> headers. If <code>Max-Forwards: 0</code> is specified for a <code>TRACE</code> or <code>OPTIONS</code> request, the server must not forward the message, but must act as the origin server.</p>
			<p>Recall that connection headers (including the Connection header itself, described above) cannot be forwarded since they convey information about the particular connection between nodes.</p>

			<h3>Via header</h3>
			<!-- Implements RFC7230 5.7.1. Via -->
			<p>The <a href="headers/Via.xml">Via</a> header specifies which intermediate nodes also processed the request, and will process the response. The server may use this for logging, debugging, or other informational purposes.</p>
			<p>If this message is going to be forwarded to another server, then append the current server information to the <code>Via</code> header.</p>

			<h3>Forwarded header</h3>
			<!-- Implements RFC7239 -->
			<p>The <a href="headers/Forwarded.xml">Forwarded</a> header specifies which intermediate nodes also processed the request and associated information about the hop. The server may use this for logging, debugging, or other informational purposes.</p>
			<p>This varies from the "Via" header in that the Forwarded header is extensible, and can contain information such as the client IP address, which would otherwise be lost by a proxy or gateway.</p>
			<p>If this message is going to be forwarded to another server, then append the current server information to the <code>Forwarded</code> header.</p>

			<h3>Max-Forwards header</h3>
			<!-- Implements RFC7231 5.1.2. Max-Forwards -->
			<p>For nodes that would normally forward the request, the <a href="headers/Max-Forwards.xml">Max-Forwards</a> header indicates if the node may forward the request. If the received value is <code>0</code>, then the node cannot forward the message, but must act as the target recipient; otherwise it must forward the message after decrementing the value.</p>
			<p>Origin servers may generally ignore this header.</p>

			<h2>Authenticate credentials</h2>
			<p>Users may send an <a href="headers/Authorization.xml">Authorization</a> header (or <a href="headers/Proxy-Authorization.xml">Proxy-Authorization</a> header for intermediaries) that carries credentials authorizing them to perform the request.</p>
			<p>Some user agents might identify themselves with a TLS client certificate. In these cases, that connection is authenticated, but not necessarily any individual HTTP message, which might be forwarded from a user agent, or be generated by a third party script; the server should still require authorization headers in addition to the client certificate to prevent ambient authority attacks. (Subrequests from untrusted sources should be careful to make the request over an unauthenticated connection, to prevent an ambient authority/confused deputy attack.)</p>
			<p>The operations performed for the rest of request processing assume the server will verify these credentials before performing the operation. If an operation requires authority, but the client has not specified any credentials, or the credentials are insufficient for the requested operation, emit 401 (Unauthorized) with a <a href="headers/WWW-Authenticate.xml">WWW-Authenticate</a> header.</p>

			<h3>Rate limiting users</h3>
			<!-- Implements RFC6585 4. 429 Too Many Requests -->
			<p>If the server is able to keep track of requests per user, it may signal a request from that specific user has exceeded limits with <a href="status-codes/429.xml">429 (Too Many Requests)</a>. The server should use <a href="headers/Retry-After.xml">Retry-After</a> to specify the next time a client will be able to make successful requests.</p>
			<p>The server can make this determination based on routing information (like IP address), or valid credentials, whichever is favorable to the user.</p>

			<h2>Request metadata</h2>
			<p>The following headers contain information about the request or the user making the request:</p>
			<dl>
				<dt>From</dt><dd>An email address that can be contacted if there's any questions about the user-agent or user making the request. We suggest using this for automated scripts and bots, in the case of misbehavior.</dd>
				<dt>Referer</dt><dd>Specifies where the current request URI was obtained from.</dd>
				<dt>User-Agent</dt><dd>Names/describes the user agent making the request.</dd>
			</dl>
			<p>Consider logging this information for debugging purposes.</p>

			<h2>Handle method</h2>
			<p>Process subroutines that vary based on incoming method.</p>

			<h3>GET, HEAD</h3>
			<p>Dereference the resource according to the section below.</p>

			<h3>OPTIONS</h3>
			<p>OPTIONS is specified to permit requesting metadata about a resource as a document, such as details of Content-Type negotiation, though at present time there is no standard for how to represent such information.</p>

			<h3>PUT</h3>
			<p>The PUT method updates a resource with an uploaded document, creating it if it doesn't exist.</p>
			<p>The server should look up the resource being replaced (if any) and perform the necessary post-replace hooks, but this is not of concern to the client.</p>

			<h2>Dereference resource</h2>
			<p>Most methods will need to <i>dereference</i> the resource: look up the effective request URI from the routing table and/or database, to determine if it exists.</p>
			<p>If the resource is expected to exist, but does not exist, return <a href="status-codes/404.xml">404 (Not Found)</a>.</p>
			<p>If a resource is marked as deleted, return <a href="status-codes/410.xml">410 (Gone)</a>.</p>
			<p>If the resource is supposed to be created, but the server cannot create the resource (e.g. the selected URI is read-only), return <a href="status-codes/403.xml">403 (Forbidden)</a>.</p>
			<p>Applications should route based on the full URI and be prepared to route requests for multiple different hosts.</p>

			<h3>Redirects</h3>
			<p>The server can mark some resources as having moved to a different URI, for various reasons.</p>
			<p>Servers should avoid renaming resources if there's not a pressing problem with keeping a URI.</p>
			<p>In service of redirects, select an appropriate 3xx redirect, and use the <a href="headers/Location.xml">Location</a> header to specify the resource to direct the user-agent to.</p>
			<p>Resources and other operations can send a redirect (e.g. a service that points a user to a random webpage), these uses will be explored later.</p>

			<h2>Handle Upgrade</h2>
			<!-- Implements RFC7230 6.7. Upgrade -->
			<p>The <a href="headers/Upgrade.xml">Upgrade</a> request header asks the server to transition the protocol from HTTP/1.1 to some other protocol. Multiple protocols may be specified, which the server may choose from. The request is usually sent as a GET request.</p>
			<p>If the server intends to honor the request, then respond with 101 (Switching Protocols), a <code>Connection: upgrade</code> header, and an Upgrade header specifying the protocol. The server may ignore the header if it's content with the protocol as it is.</p>
			<aside><p>Primary differences from using CONNECT is that CONNECT is hop-by-hop, and as a method, cannot be ignored.</p></aside>

			<h2>Validate request body headers</h2>
			<h3>Verify a request-body is acceptable</h3>
			<p>The presence of a message body in a request is signaled by a Content-Length or Transfer-Encoding header field. Verify that the current resource supports a method that accepts a content body.</p>

			<h3>Identify request body URI</h3>
			<!-- Implements 3.1.4.1. Identifying a Representation -->
			<p>It is possible for the user-agent to specify a URI for the request body with the <a href="headers/Content-Location.xml">Content-Location</a> header.</p>
			<p>If it is present, its meaning is left largely up to the server do decide.</p>

			<h3>Transfer-Encoding</h3>
			<p>Verify that all applied transfer codings are known to the server, otherwise return 415 (Unsupported Media Type).</p>

			<h3>Content-Type</h3>
			<!-- Implements RFC7231 3.1.1.5. Content-Type -->
			<!-- Implements RFC7231 6.5.13. 415 Unsupported Media Type -->
			<p>The <a href="headers/Content-Type.xml">Content-Type</a> header determines which <i>media type</i> will be used to decode the entity-body. Media types are listed in a non-trivial format that accepts case, whitespace, parameters, and quoted-strings, so use a library to parse and normalize the Content-Type before reading it.</p>
			<p>Generally for every media type, there is a single specification that specifies how to parse and use the document. Parse the Content-Type (using a library that parses media types) and resolve which parser the server should use to parse the body, if any.</p>
			<p>If the server has no way to consume the media type, return <a href="status-codes/415.xml">415 (Unsupported Media Type)</a>.</p>

			<h4>Content-Type charset</h4>
			<p>Most media types, especially <code>text/*</code> types, implement a character set, a method of decoding a byte to a particular character. If the media type uses a charset decoding, ensure the server is capable of decoding it. The server should support ASCII and UTF-8.</p>

			<h3>Content-Length</h3>
			<p>Verify that the Content-Length is reasonable. If it is above the maximum length the server is willing to handle, return 413 (Payload Too Large). The server may wish to vary this maximum based on the request-URI, Content-Type, method, and user authorization.</p>

			<h3>Content-Encoding</h3>
			<p>Verify that all applied Content-Encodings are known to the server, otherwise return 415 (Unsupported Media Type).</p>

			<h3>Content-Language</h3>
			<p>HTTP allows the sender to identify the primary language of the entity body (request body or response body) using the <code>Content-Language</code> header.</p>

			<h2>Handle 100-continue</h2>
			<p>If the client set the <code>100-continue</code> flag, that means the client has paused uploading the request-body, and is waiting on verification from the server that the proposed upload looks acceptable and fits the resource limits.</p>
			<p>Since at this point all the headers look acceptable, emit a <a href="status-codes/100.xml">100 (Continue)</a> response: an intermediate response that will be replaced with the actual status code later on.</p>
			<p>Alternatively, if the client did not ask for 100-continue and there's a serious problem with accepting a large upload, the server can close the entire TCP connection.</p>

			<h3>Consume message-body</h3>
			<p>If nothing looks wrong with the request metadata, the server can begin accepting the payload body.</p>
			<ol>
				<li>If the first transfer coding to decode is "chunked", then read the chunked stream until it indicates the request-body is EOF.</li>
				<li>Otherwise if there is a Content-Length header, read that many bytes, then the request ends.</li>
			</ol>

			<h2>Decode transfer-codings</h2>
			<p>A <i>transfer coding</i> is a transform applied to the requested resource for transporting the representation over the network, usually to compress the representation, and to indicate when the body has ended.</p>
			<p>HTTP servers MUST support the "chunked" encoding. Servers should support the following transfer-codings:</p>
			<ul>
				<li>chunked</li>
				<li>compress</li>
				<li>deflate</li>
				<li>gzip</li>
			</ul>

			<h3>The chunked transfer coding</h3>
			<!-- Implements RFC7230 3.3.1. Transfer-Encoding -->
			<!-- Implements RFC7230 4.3. TE -->
			<!-- Implements RFC7230 4.4. Trailer -->
			<p>The <code>chunked</code> Transfer-Encoding is used to specify more detailed information about the status of the transfer, especially indicating when the transfer has ended.</p>

			<h2>Decode content-encoding</h2>
			<p>The values for <code>Content-Encoding</code> are:</p>
			<ul>
				<li>identity</li>
				<li>compress</li>
				<li>deflate</li>
				<li>gzip</li>
			</ul>

			<h2>Handle request body</h2>
			<p>Procedure for handling the request body varies with the method:</p>
			<dl class="inline">
				<dt>GET</dt><dd>Ignore the request body, or return 413 (Payload Too Large). GET with a request body is technically legal, and could be used as a kind of safe POST; in this case the server must indicate the response is not cachable.</dd>
				<dt>HEAD</dt><dd>Same as GET.</dd>
				<dt>POST</dt><dd>Semantics are defined by the resource; the server should have a subroutine associated with the resource that accepts and processes the POST request (including request body).</dd>
				<dt>PUT</dt><dd>Store a resource on the server at a specific URI. The subroutine that stores the data may vary based on the request URI (e.g. authority or path) and Content-Type.</dd>
				<dt>DELETE</dt><dd>Behavior is undefined, discard or return 413 (Payload Too Large).</dd>
				<dt>CONNECT</dt><dd>Should have been handled in previous steps, generate 500 (Internal Server Error).</dd>
				<dt>OPTIONS</dt><dd>Behavior is undefined, discard or return 413 (Payload Too Large).</dd>
				<dt>TRACE</dt><dd>Clients are prohibited from providing a request body for TRACE; enforce this by emitting 413 (Payload Too Large).</dd>
			</dl>

			<h2>Test conditional headers</h2>
			<p>Before any changes to the server state have been made, the server should test any conditional headers to see if the server should skip this request. See <a href="conditional.xml">conditional requests</a> for handling. Depending on the requested action, this step may return <a href="status-codes/304.xml">304 (Not Modified)</a> or <a href="status-codes/412.xml">412 (Precondition Failed)</a>.</p>

			<h2>Report changes to server state</h2>
			<h3>Created resources</h3>
			<p>If the request was one to create a resource (either a PUT request to a resource that didn't previously exist, or a POST request that created a new resource), then:</p>
			<ol>
				<li><p>Set the status code to 201 (Created)</p></li>
				<li><p>Set a Location header to point to the resource created. If multiple resources were created, point to a "primary" resource with sufficient links so that the other created resources may be discovered.</p></li>
				<li><p>If the request is known to have come from a Web browser (e.g. by using a form field that says <code>prefer=redirect</code>), then instead use status code 303 to have the Web browser direct the user agent to the newly created resource.</p></li>
			</ol>

			<h3>Modified resources</h3>
			<p>If the request was one to modify a resource (usually a PUT request to a resource that already existed), then set the status code to 200 (OK) or 204 (No Content).</p>

			<h3>Ongoing process</h3>
			<p>If the request will take a long time to fulfill (more than several seconds), and wishes to inform the client of this, it can send a 202 (Accepted) response.</p>
			<p>The result should describe how to request the result of the action when it finishes. Currently, there is no standardized means to do this.</p>

			<h2>Response line and connection details</h2>
			<h3>HTTP-version</h3>
			<p>The server must reply with an HTTP version to which both the server and client are conformant. If the server is responding to a client in an HTTP version it doesn't understand, send the latest version the server understands in the response-line (e.g. <code>HTTP/1.1</code>).</p>

			<h3>Date</h3>
			<!-- Implements RFC7231 7.1.1. Origination Date -->
			<p>The <code>Date</code> header is required for responses, unless the server doesn't have an accurate time to send. (Clients may also send this header, but it's optional for them.)</p>
			<p>For implementation, see <a href="headers/Date.xml">HTTP Date header</a>.</p>

			<h3>Connection</h3>
			<p>If the server is going to close the connection at the end of the response, it must send <code>Connection: close</code> to the client.</p>

			<h2>Select representation</h2>
			<h3>Content-Type negotiation</h3>
			<p>If the request-URI is allowed to vary among a number of dimensions, use the various Accept headers to determine which representation to pick:</p>
			<ul>
				<li>Accept</li>
				<li>Accept-Charset</li>
				<li>Accept-Language</li>
			</ul>
			<!-- TODO: is Accept-Encoding a header that can be varied in a URI? -->
			<p>See the page on Content-Type Negotiation for more information.</p>

			<h3>Set Content-Location</h3>
			<p>With the different dimensions of variance negotiated, compute the URI that uniquely identifies this selection. Send it in the <code>Content-Location</code> header. Preferably compute and send a relative URI, to minimize the chances that an intermediate node introduces problems if it rewrites the request-URI (e.g. the host header, or path).</p>

			<h3>Set Vary</h3>
			<!-- Implements RFC7231 7.1.4. Vary -->
			<p>If the server selected a representation from among multiple representation, the dimensions that it selected among must be listed in the <code>Vary</code> header.</p>

			<h3>Prefer header</h3>
			<!-- Implements RFC7240 -->
			<p>The <code>Prefer</code> header specifies what sort of response a client may prefer from the server.</p>
			<p>The server may indicate which of the preferences it honored using the <code>Preference-Applied</code> response header.</p>

			<h3>Transfer codings</h3>
			<!-- Implements RFC7230 4.3. TE -->
			<p>The <code>TE</code> header specifies which transfer codings a client is capable of decoding.</p>
			<p>The <code>chunked</code> transfer coding (without trailers) is assumed for HTTP/1.1 user agents.</p>
			<p>If the client specifies the special value <code>trailers</code>, the user agent supports trailers in the chunked transfer coding. If the server wishes to use trailers, it must send the <code>Trailer</code> header.</p>


			<h2>Freshness and caching</h2>
			<p>Write the several headers that can be used for caching.</p>
			<h3>Caching control</h3>
			<ul>
				<li>Age</li>
				<li>Cache-Control</li>
				<li>Expires</li>
			</ul>
			<h3>Metadata about selected representation</h3>
			<ul>
				<li>ETag</li>
				<li>Last-Modified</li>
			</ul>

			<h2>Write response body</h2>
			<h3>Encode content coding</h3>
			<p>A content coding is a transform applied to the representation intended to be decoded by the final recipient. It is not typically decoded by intermediaries, except transforming proxies.</p>
			<p>The applied content codings are specified in the <code>Content-Encoding</code> header.</p>
			<p>Content codings are usually cached by the server.</p>

			<h3>Compute length</h3>
			<!-- Implement RFC7230 3.3.2. Content-Length -->
			<p>If the server knows the length of the response, it should send the <code>Content-Length</code> header. The client will read that many bytes after the end of headers as the response-body, and then begin reading the next response in the pipeline.</p>
			<p>If the server does not know the length of the response by this point, different HTTP protocols handle the response differently:</p>
			<dl>
				<dt>HTTP/1.0</dt><dd>Terminate the connection to end the response. Ensure that <code>Connection: close</code> was sent earlier.</dd>
				<dt>HTTP/1.1</dt><dd>Use the "chunked" Transfer-Encoding.</dd>
			</dl>
			<p>A server MUST NOT send Content-Length with a 1xx status, a (204 No Content) status, or in response to a CONNECT request.</p>

			<h3>Encode transfer coding</h3>
			<p>A transfer coding is a transform applied to the message in order to send the message over the network. Transfer codings are semantically transparent, and frequently re-encoded by intermediaries.</p>
			<p>It is only available on HTTP/1.1, used as a method of specifying the end of an indeterminate response.</p>
			<p>Applying a transfer coding means the server cannot send a <code>Content-Length</code> header, so its use should be avoided in favor of using Content-Length.</p>

			<h3>Write data</h3>
			<p>The data to respond with varies by method:</p>
			<dl class="inline">
				<dt>GET</dt><dd>the target resource</dd>
				<dt>HEAD</dt><dd>no response body, but has the same headers as GET</dd>
				<dt>POST</dt><dd>the output of the subroutine associated with the requested resource</dd>
				<dt>PUT, DELETE</dt><dd>the result of operations performed</dd>
				<dt>OPTIONS</dt><dd>list of communications options</dd>
				<dt>TRACE</dt><dd>the request message as received by the end server</dd>
			</dl>
			<h2>Clean up connection</h2>
			<h3>Handle Connection: close</h3>
			<!-- Implements RFC7230 6.6. Tear-down -->
			<p>If the client specified the <code>close</code> token in the <code>Connection</code> header, or if the connection is HTTP/1.0, the server must close the TCP channel here (even if the client sent additional requests).</p>
			<p>Recall that the server sends <code>Connection: close</code> to the client before it does this.</p>
			<aside><p>This is handled by Node.js.</p></aside>

			<h2>Overview table</h2>
			<h3>Referenced specifications</h3>
			<ul class="inline">
				<li><a href="https://httpwg.org/specs/rfc7230.html">RFC 7230: Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</a></li>
				<li><a href="https://httpwg.org/specs/rfc7231.html">RFC 7231: Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</a></li>
				<li><a href="https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml">IANA: Service Name and Transport Protocol Port Number Registry</a></li>
				<li><a href="https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml">IANA: Hypertext Transfer Protocol (HTTP) Status Code Registry</a></li>
				<li><a href="https://www.iana.org/assignments/http-methods/http-methods.xhtml">IANA: Hypertext Transfer Protocol (HTTP) Method Registry</a></li>
				<li><a href="https://www.iana.org/assignments/message-headers/message-headers.xhtml">IANA: Message Headers</a></li>
			</ul>
		</main>
	</body>
</html>
